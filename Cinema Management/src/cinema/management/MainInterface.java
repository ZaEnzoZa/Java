/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cinema.management;

import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

/**
 *
 * @author Aidan
 */
public class MainInterface extends javax.swing.JFrame {

    /**
     * Creates new form MainInterface
     */
    
    private static SessionFactory factory;
    public MainInterface() {
        initComponents();
        
        if (Login.isManager) {
        printOut();
        printOutCustomer();
        } else {
        tblOutput.setVisible(false);
        printOutCustomer();
        }
        
        if (Login.isManager == false) {
            btnDeleteBookings.setVisible(false);
            btnDeleteCustomer.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblOutput = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOutput2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        btnSearchBookings = new javax.swing.JButton();
        btnDeleteBookings = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        cmbSortBookings = new javax.swing.JComboBox<>();
        btnSearchCustomer = new javax.swing.JButton();
        btnDeleteCustomer = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        cmbSortCustomer = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1050, 800));
        setPreferredSize(new java.awt.Dimension(1050, 800));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblOutput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblOutput);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 760, 350));

        tblOutput2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblOutput2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, 760, 240));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 680, 270, 60));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cinema Information:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 10, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Customer login information:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 400, -1, -1));

        jButton2.setText("Create Booking");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 680, 270, 60));

        btnSearchBookings.setText("Search");
        btnSearchBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBookingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearchBookings, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, -1, -1));

        btnDeleteBookings.setText("Delete");
        btnDeleteBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookingsActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeleteBookings, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Sort by:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 160, -1, -1));

        cmbSortBookings.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Booking ID", "Customer", "Cinema", "Movie", "Seat" }));
        cmbSortBookings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortBookingsActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSortBookings, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 190, -1, -1));

        btnSearchCustomer.setText("Search");
        btnSearchCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCustomerActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearchCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 440, -1, -1));

        btnDeleteCustomer.setText("Delete");
        btnDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCustomerActionPerformed(evt);
            }
        });
        getContentPane().add(btnDeleteCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 490, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setText("Sort by:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 560, 60, -1));

        cmbSortCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Customer ID", "Name", "Surname", "Username" }));
        cmbSortCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortCustomerActionPerformed(evt);
            }
        });
        getContentPane().add(cmbSortCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 590, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/MainInterface.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1090, 900));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSortBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSortBookingsActionPerformed
        printOut();
    }//GEN-LAST:event_cmbSortBookingsActionPerformed

    private void btnSearchBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBookingsActionPerformed
        int searchIDBooking = Integer.valueOf(JOptionPane.showInputDialog(null, "Input Booking ID", 1));
        searchBookingID(searchIDBooking);
    }//GEN-LAST:event_btnSearchBookingsActionPerformed

    private void btnDeleteBookingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookingsActionPerformed
        int deleteIDBooking = Integer.valueOf(JOptionPane.showInputDialog(null, "Input booking ID to delete", 1));
        deleteIDBooking(deleteIDBooking);
        printOut();
    }//GEN-LAST:event_btnDeleteBookingsActionPerformed

    private void btnSearchCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCustomerActionPerformed
        int searchIDCust = Integer.valueOf(JOptionPane.showInputDialog(null, "Input customer ID", 1));
        searchCustomerID(searchIDCust);
    }//GEN-LAST:event_btnSearchCustomerActionPerformed

    private void btnDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCustomerActionPerformed
        int deleteIDCustomer = Integer.valueOf(JOptionPane.showInputDialog(null, "Input the customer ID to delete", 1));
        deleteIDCustomer(deleteIDCustomer);
        printOutCustomer();
    }//GEN-LAST:event_btnDeleteCustomerActionPerformed

    private void cmbSortCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSortCustomerActionPerformed
        printOutCustomer();
    }//GEN-LAST:event_cmbSortCustomerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new Login().setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
        new CreateBooking().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JButton btnDeleteBookings;
    private javax.swing.JButton btnDeleteCustomer;
    private javax.swing.JButton btnSearchBookings;
    private javax.swing.JButton btnSearchCustomer;
    private static javax.swing.JComboBox<String> cmbSortBookings;
    private static javax.swing.JComboBox<String> cmbSortCustomer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private static javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTable tblOutput;
    private static javax.swing.JTable tblOutput2;
    // End of variables declaration//GEN-END:variables
    
    public static void printOut(){
         
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Booking ID", "Customer ID", "Customer Name", "Customer Surname", "Movie", "Cinema", "Seat"}, 0);
            
                String hql = "FROM POJOS.Bookings";
            
                
             switch (cmbSortBookings.getSelectedIndex()) {
            case 0:
                hql += " ORDER BY bookingID ASC";
                break;
            case 1:
                hql += " ORDER BY customer ASC";
                break;
            case 2:
                hql += " ORDER BY cinema ASC";
                break;
            case 3:
                hql += " ORDER BY movie ASC";
                break;
            case 4:
                hql += " ORDER BY seat ASC";
                break;
            default:
                return;

        }    
             Query query = session.createQuery(hql);
            stuff = query.list();
                      
            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Bookings list = (POJOS.Bookings) iterator.next();
                    model.addRow(new Object[]{list.getBookingId(), list.getCustomer().getId(),list.getCustomer().getName(), list.getCustomer().getSurname(), list.getMovies().getMovieName(), list.getCinema().getName(), list.getSeat()});
                }
                tblOutput.setModel(model);

            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    public static void printOutCustomer(){
         
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Customer ID", "Name", "Surname", "Username"}, 0);
            
                String hql = "FROM POJOS.Customer";
            
                
             switch (cmbSortCustomer.getSelectedIndex()) {
            case 0:
                hql += " ORDER BY ID ASC";
                break;
            case 1:
                hql += " ORDER BY Name ASC";
                break;
            case 2:
                hql += " ORDER BY Surname ASC";
                break;
            case 3:
                hql += " ORDER BY Username ASC";
                break;
            
            default:
                return;
        }  
             
             Query query = session.createQuery(hql);
            stuff = query.list();
                      
            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Customer list = (POJOS.Customer) iterator.next();
                    model.addRow(new Object[]{list.getId(),list.getName(), list.getSurname(), list.getUsername()});
                }
                tblOutput2.setModel(model);

            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    public static void searchBookingID(int searchID){
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Booking ID", "Customer ID", "Customer Name", "Customer Surname", "Movie", "Cinema", "Seat"}, 0);
            
                String hql = "FROM POJOS.Bookings WHERE BookingID = " + searchID;
            
                
             switch (cmbSortBookings.getSelectedIndex()) {
            case 0:
                hql += " ORDER BY bookingID ASC";
                break;
            case 1:
                hql += " ORDER BY customer ASC";
                break;
            case 2:
                hql += " ORDER BY cinema ASC";
                break;
            case 3:
                hql += " ORDER BY movie ASC";
                break;
            case 4:
                hql += " ORDER BY seat ASC";
                break;
            default:
                return;

        }    
             Query query = session.createQuery(hql);
            stuff = query.list();
                      
            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Bookings list = (POJOS.Bookings) iterator.next();
                    model.addRow(new Object[]{list.getBookingId(), list.getCustomer().getId(),list.getCustomer().getName(), list.getCustomer().getSurname(), list.getMovies().getMovieName(), list.getCinema().getName(), list.getSeat()});
                }
                tblOutput.setModel(model);

            } else {
                JOptionPane.showMessageDialog(null, "The record could not be found.");
            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    public static void searchCustomerID(int searchID){
        factory = new Configuration().configure().buildSessionFactory();
         Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();

            Criteria crit = null;
            List stuff = null;
            DefaultTableModel model = null;
            model = new DefaultTableModel(new String[]{"Customer ID", "Name", "Surname", "Username"}, 0);
            
                String hql = "FROM POJOS.Customer WHERE ID = " + searchID;
            
                
             switch (cmbSortBookings.getSelectedIndex()) {
            case 0:
                hql += " ORDER BY ID ASC";
                break;
            case 1:
                hql += " ORDER BY Name ASC";
                break;
            case 2:
                hql += " ORDER BY Surname ASC";
                break;
            case 3:
                hql += " ORDER BY Username ASC";
                break;
            
            default:
                return;
        }    
             Query query = session.createQuery(hql);
            stuff = query.list();
                      
            if (stuff.size() > 0) {

                for (Iterator iterator = stuff.iterator(); iterator.hasNext();) {

                    POJOS.Customer list = (POJOS.Customer) iterator.next();
                    model.addRow(new Object[]{list.getId(),list.getName(), list.getSurname(), list.getUsername()});
                }
                tblOutput2.setModel(model);

            } else {
                JOptionPane.showMessageDialog(null, "The record could not be found.");
            }
            tx.commit();

        } catch (HibernateException e) {
            if (tx != null) {
                tx.rollback();
            }
            e.printStackTrace();
        } finally {
            session.close();
        }
        
    }
    
    public static void deleteIDCustomer(int deleteID){
        
    
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            POJOS.Customer del = (POJOS.Customer) session.get(POJOS.Customer.class, deleteID);
                    session.delete(del);
                    tx.commit();
                } catch (HibernateException e) {
                    if (tx != null) {
                        tx.rollback();
                    }
                    e.printStackTrace();
                } finally {
                    session.close();
        }} catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
    
    
    }
public static void deleteIDBooking(int deleteID){
        
    
         try {
        factory = new Configuration().configure().buildSessionFactory();
                
                Session session = factory.openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            POJOS.Bookings del = (POJOS.Bookings) session.get(POJOS.Bookings.class, deleteID);
                    session.delete(del);
                    tx.commit();
                } catch (HibernateException e) {
                    if (tx != null) {
                        tx.rollback();
                    }
                    e.printStackTrace();
                } finally {
                    session.close();
        }} catch (Throwable ex) {
                System.err.println("An Error has occurred");
                throw new ExceptionInInitializerError(ex);
            }
    
    
    }
}
